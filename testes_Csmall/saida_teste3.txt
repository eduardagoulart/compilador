-------Token Buffer------------
Token          | Num. da Linha | Lexema
----------------------------------------------- 
INT              1 		 int       
MAIN             1 		 main      
LBRACKET         1 		 (         
RBRACKET         1 		 )         
LBRACE           2 		 {         
INT              3 		 int       
ID               3 		 x         
ATTR             3 		 =         
INTEGER_CONST    3 		 1         
COMMA            3 		 ,         
ID               3 		 y         
ATTR             3 		 =         
INTEGER_CONST    3 		 1         
OR               3 		 ||        
INTEGER_CONST    3 		 2         
PLUS             3 		 +         
INTEGER_CONST    3 		 3         
MULT             3 		 *         
INTEGER_CONST    3 		 4         
AND              3 		 &&        
INTEGER_CONST    3 		 1         
PCOMMA           3 		 ;         
FLOAT            4 		 float     
ID               4 		 z         
ATTR             4 		 =         
ID               4 		 x         
PLUS             4 		 +         
ID               4 		 y         
PCOMMA           4 		 ;         
PRINT            5 		 print     
LBRACKET         5 		 (         
ID               5 		 x         
RBRACKET         5 		 )         
PCOMMA           5 		 ;         
PRINT            6 		 print     
LBRACKET         6 		 (         
ID               6 		 y         
RBRACKET         6 		 )         
PCOMMA           6 		 ;         
PRINT            7 		 print     
LBRACKET         7 		 (         
ID               7 		 z         
RBRACKET         7 		 )         
PCOMMA           7 		 ;         
WHILE            8 		 while     
LBRACKET         8 		 (         
ID               8 		 x         
LT               8 		 <         
ID               8 		 y         
PLUS             8 		 +         
ID               8 		 z         
MULT             8 		 *         
INTEGER_CONST    8 		 9         
MINUS            8 		 -         
INTEGER_CONST    8 		 3         
RBRACKET         8 		 )         
LBRACE           9 		 {         
INT              10 		 int       
ID               10 		 b         
ATTR             10 		 =         
INTEGER_CONST    10 		 1         
COMMA            10 		 ,         
ID               10 		 c         
ATTR             10 		 =         
INTEGER_CONST    10 		 2         
COMMA            10 		 ,         
ID               10 		 d         
ATTR             10 		 =         
INTEGER_CONST    10 		 5         
PCOMMA           10 		 ;         
IF               11 		 if        
LBRACKET         11 		 (         
ID               11 		 d         
EQ               11 		 ==        
ID               11 		 c         
AND              11 		 &&        
ID               11 		 b         
PLUS             11 		 +         
ID               11 		 c         
RBRACKET         11 		 )         
ID               12 		 b         
ATTR             12 		 =         
INTEGER_CONST    12 		 1         
PCOMMA           12 		 ;         
ELSE             13 		 else      
IF               13 		 if        
LBRACKET         13 		 (         
ID               13 		 b         
LE               13 		 <=        
ID               13 		 c         
RBRACKET         13 		 )         
LBRACE           14 		 {         
IF               15 		 if        
LBRACKET         15 		 (         
ID               15 		 x         
LT               15 		 <         
INTEGER_CONST    15 		 4         
RBRACKET         15 		 )         
ID               16 		 x         
ATTR             16 		 =         
INTEGER_CONST    16 		 0         
PCOMMA           16 		 ;         
RBRACE           17 		 }         
ELSE             18 		 else      
LBRACE           19 		 {         
INT              20 		 int       
ID               20 		 j         
ATTR             20 		 =         
INTEGER_CONST    20 		 10        
PCOMMA           20 		 ;         
WHILE            21 		 while     
LBRACKET         21 		 (         
ID               21 		 j         
GT               21 		 >         
INTEGER_CONST    21 		 3         
RBRACKET         21 		 )         
ID               22 		 j         
ATTR             22 		 =         
ID               22 		 j         
MINUS            22 		 -         
INTEGER_CONST    22 		 1         
PCOMMA           22 		 ;         
LBRACE           23 		 {         
ID               24 		 c         
ATTR             24 		 =         
ID               24 		 c         
LT               24 		 <         
ID               24 		 b         
PCOMMA           24 		 ;         
ID               25 		 d         
ATTR             25 		 =         
ID               25 		 d         
GE               25 		 >=        
ID               25 		 c         
PCOMMA           25 		 ;         
RBRACE           26 		 }         
RBRACE           27 		 }         
PRINT            28 		 print     
LBRACKET         28 		 (         
ID               28 		 b         
RBRACKET         28 		 )         
PCOMMA           28 		 ;         
PRINT            29 		 print     
LBRACKET         29 		 (         
ID               29 		 c         
RBRACKET         29 		 )         
PCOMMA           29 		 ;         
PRINT            30 		 print     
LBRACKET         30 		 (         
ID               30 		 d         
RBRACKET         30 		 )         
PCOMMA           30 		 ;         
FLOAT            31 		 float     
ID               31 		 k         
PCOMMA           31 		 ;         
ID               32 		 x         
ATTR             32 		 =         
ID               32 		 x         
PLUS             32 		 +         
INTEGER_CONST    32 		 10        
PCOMMA           32 		 ;         
RBRACE           33 		 }         
INT              34 		 int       
ID               34 		 z         
PCOMMA           34 		 ;         
FLOAT            35 		 float     
ID               35 		 x         
COMMA            35 		 ,         
ID               35 		 y         
PCOMMA           35 		 ;         
RBRACE           36 		 }         
EOF              0 		           
---------------------------------

-------Token Buffer------------
Token          | Num. da Linha | Lexema
----------------------------------------------- 
INT              1 		 int       
MAIN             1 		 main      
LBRACKET         1 		 (         
RBRACKET         1 		 )         
LBRACE           2 		 {         
INT              3 		 int       
ID               3 		 x         
COMMA            3 		 ,         
ID               3 		 y         
ATTR             3 		 =         
INTEGER_CONST    3 		 1         
OR               3 		 ||        
INTEGER_CONST    3 		 2         
PLUS             3 		 +         
INTEGER_CONST    3 		 3         
MULT             3 		 *         
INTEGER_CONST    3 		 4         
AND              3 		 &&        
INTEGER_CONST    3 		 1         
PCOMMA           3 		 ;         
FLOAT            4 		 float     
ID               4 		 z         
ATTR             4 		 =         
ID               4 		 x         
GT               4 		 >         
INTEGER_CONST    4 		 3         
AND              4 		 &&        
ID               4 		 y         
LE               4 		 <=        
INTEGER_CONST    4 		 1         
OR               4 		 ||        
ID               4 		 y         
GT               4 		 >         
ID               4 		 x         
PCOMMA           4 		 ;         
ID               5 		 k         
ATTR             5 		 =         
ID               5 		 x         
GT               5 		 >         
INTEGER_CONST    5 		 3         
AND              5 		 &&        
LBRACKET         5 		 (         
LBRACKET         5 		 (         
ID               5 		 y         
LE               5 		 <=        
INTEGER_CONST    5 		 1         
RBRACKET         5 		 )         
PLUS             5 		 +         
INTEGER_CONST    5 		 3         
MINUS            5 		 -         
INTEGER_CONST    5 		 5         
MULT             5 		 *         
INTEGER_CONST    5 		 7         
RBRACKET         5 		 )         
OR               5 		 ||        
ID               5 		 y         
GT               5 		 >         
ID               5 		 x         
PCOMMA           5 		 ;         
WHILE            6 		 while     
LBRACKET         6 		 (         
ID               6 		 x         
LT               6 		 <         
ID               6 		 y         
PLUS             6 		 +         
ID               6 		 z         
MULT             6 		 *         
INTEGER_CONST    6 		 9         
MINUS            6 		 -         
INTEGER_CONST    6 		 3         
RBRACKET         6 		 )         
LBRACE           7 		 {         
INT              8 		 int       
ID               8 		 b         
ATTR             8 		 =         
INTEGER_CONST    8 		 1         
COMMA            8 		 ,         
ID               8 		 c         
COMMA            8 		 ,         
ID               8 		 d         
ATTR             8 		 =         
INTEGER_CONST    8 		 5         
PCOMMA           8 		 ;         
IF               9 		 if        
LBRACKET         9 		 (         
ID               9 		 d         
EQ               9 		 ==        
ID               9 		 c         
AND              9 		 &&        
ID               9 		 b         
PLUS             9 		 +         
ID               9 		 c         
RBRACKET         9 		 )         
ID               10 		 k         
ATTR             10 		 =         
ID               10 		 j         
PCOMMA           10 		 ;         
ELSE             11 		 else      
IF               11 		 if        
LBRACKET         11 		 (         
ID               11 		 b         
LE               11 		 <=        
ID               11 		 c         
RBRACKET         11 		 )         
LBRACE           12 		 {         
PRINT            13 		 print     
LBRACKET         13 		 (         
ID               13 		 aux       
PLUS             13 		 +         
ID               13 		 nome      
RBRACKET         13 		 )         
PCOMMA           13 		 ;         
IF               14 		 if        
LBRACKET         14 		 (         
ID               14 		 a         
GT               14 		 >         
INTEGER_CONST    14 		 4         
RBRACKET         14 		 )         
ID               15 		 x         
ATTR             15 		 =         
INTEGER_CONST    15 		 0         
PCOMMA           15 		 ;         
RBRACE           16 		 }         
ELSE             17 		 else      
LBRACE           18 		 {         
INT              19 		 int       
ID               19 		 j         
PCOMMA           19 		 ;         
WHILE            20 		 while     
LBRACKET         20 		 (         
ID               20 		 t         
GT               20 		 >         
INTEGER_CONST    20 		 3         
RBRACKET         20 		 )         
PRINT            21 		 print     
LBRACKET         21 		 (         
INTEGER_CONST    21 		 1         
RBRACKET         21 		 )         
PCOMMA           21 		 ;         
LBRACE           22 		 {         
ID               23 		 C         
ATTR             23 		 =         
ID               23 		 zz        
LT               23 		 <         
ID               23 		 ww        
PCOMMA           23 		 ;         
ID               24 		 D         
ATTR             24 		 =         
ID               24 		 xx        
GE               24 		 >=        
ID               24 		 yy        
PCOMMA           24 		 ;         
RBRACE           25 		 }         
RBRACE           26 		 }         
FLOAT            27 		 float     
ID               27 		 k         
PCOMMA           27 		 ;         
RBRACE           28 		 }         
INT              29 		 int       
ID               29 		 z         
PCOMMA           29 		 ;         
FLOAT            30 		 float     
ID               30 		 x         
COMMA            30 		 ,         
ID               30 		 y         
PCOMMA           30 		 ;         
RBRACE           31 		 }         
EOF              0 		           
---------------------------------
